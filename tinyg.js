// Generated by CoffeeScript 1.6.2
(function() {
  var app, clc, current_status, error, express, init_cmds, msg, notice, prod, serial, serialport, sp, totinyg, util, warn,
    __hasProp = {}.hasOwnProperty;

  util = require("util");

  serial = require("serialport");

  serialport = serial.SerialPort;

  express = require("express");

  clc = require("cli-color");

  error = clc.redBright.bold;

  warn = clc.yellow;

  notice = clc.white;

  current_status = {};

  app = express();

  app.use(function(req, res, next) {
    msg(notice("Logger: " + req.method + ", " + req.url));
    return next();
  });

  app.use("/sr", function(req, res, next) {
    msg(notice("Status request: " + req.method + ", " + req.url));
    console.log(warn(util.inspect(current_status)));
    return res.json(current_status);
  });

  app.use(express.bodyParser());

  app.use("/cmd", function(req, res, next) {
    msg(warn('Command: %s %s', req.url, util.inspect(req.body)));
    totinyg(JSON.stringify(req.body));
    return res.json(current_status);
  });

  app.use(express["static"](__dirname + "/public"));

  app.listen(8080, "127.0.0.1");

  sp = new serialport("/dev/ttyUSB0", {
    baudrate: 115200,
    databits: 8,
    parity: "none",
    stopbits: 1,
    flowcontrol: false,
    parser: serial.parsers.readline("\n")
  });

  totinyg = function(s) {
    console.log(warn("Sending: " + s));
    return sp.write(s + '\n');
  };

  prod = function() {
    var s;

    s = '{"sr":""}';
    sp.write(s + '\n');
    process.stdout.write(clc.moveTo(1, 23));
    return process.stdout.write("" + (Math.round(process.uptime())) + ": sending: " + s);
  };

  msg = function(s) {
    process.stdout.write(clc.moveTo(1, 25));
    return process.stdout.write("" + (Math.round(process.uptime())) + ": " + s);
  };

  init_cmds = ["ST 1", "XSN 0", "XSX 0", "YSN 3", "YSX 3", "ZSN 0", "ZSX 0", "ASN 0", "ASX 0"];

  sp.on("open", function() {
    process.stdout.write(clc.reset);
    process.stdout.write(clc.moveTo(1, 1) + "Node TinyG");
    process.stdout.write(clc.moveTo(1, 2) + "Port opened");
    msg("open");
    setInterval(prod, 2000);
    return sp.on("data", function(data) {
      var d, itemname, sr, text, value;

      text = data.toString("ascii");
      msg(text);
      if (/^[\],:{}\s]*$/.test(text.replace(/\\(?:["\\\/bfnrt]|u[0-9a-fA-F]{4})/g, '@').replace(/"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g, ']').replace(/(?:^|:|,)(?:\s*\[)+/g, ''))) {
        d = JSON.parse(text);
        msg(warn(text));
        if (d.r != null) {
          sr = d.r.sr;
        }
        if (d.sr != null) {
          sr = d.sr;
        }
        for (itemname in sr) {
          if (!__hasProp.call(sr, itemname)) continue;
          value = sr[itemname];
          current_status[itemname] = value;
        }
        process.stdout.write(clc.moveTo(1, 3));
        return process.stdout.write(util.inspect(current_status));
      } else {
        return msg(error("Invalid JSON"));
      }
    });
  });

}).call(this);
